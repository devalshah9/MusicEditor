Names: Anirudh Katipally and Deval Shah
Provider names: Samuel Lazarus and Soo Jung Rhee

The interface we were given was flexible in most regards. To set the notes of a piece, the setNotes method provided took in a Collection of notes, which is generalized and allows for any sort of data structure to be provided to it. We used an ArrayList as this is what their documentation said they used, but any data structure implementing Collection would have worked. Their code required a specific data structure for a note but that is unavoidable in our opinion. There is nothing that I would recommend changing about the abstraction of their interfaces - everything can be set at the highest level of the composite view’s interface and nothing requires specific kinds of data other than a Collection of notes.


	Their views are extremely capable. After trouble shooting our own adaption code, we were able to load the composite view immediately, and execute every single key command that we had. Their views are synched extremely well, and it seems that all the Listener patterns were implemented correctly. It’s pretty slow for loading the longer songs which I imagine has to do with using ArrayLists to represent their data, but once it loads it is extremely smooth. Avoiding ArrayLists is the only thing I’d change about the way they did their views - it’s too inefficient for the longer songs.


It was pretty convenient to reuse the provider’s code. The code had most of the requirements from Assignment 7, such as scrolling left and right, and scrolling to the beginning or end of a song. To adapt their interface to our expectations, we created a View Adapter that implemented our IGuiView interface. Most functions were simple to adapt, such as scrolling and pausing and playing, as those functions were written in the provider’s view interface. One major difference we saw in their code was that they used Array Lists to organize their notes, while we used a Tree Map. I believe this caused many things to render slower than in our version, as they are not as efficient as Hash Maps. Their Notes were also slightly different than ours, which is expected, as not everyone would have the same exact Notes with the same methods. This required us to convert our notes to theirs, as well as our songs to theirs, in order to use the “Fixed Grid” they used for organizing notes and displaying songs.


	Since they had separate methods for pausing (stop) and playing (start), and we had one for both (clicking spacebar would either pause or play, based on the state of the song), we had to create a local boolean to track whether the song was in a paused or playing state. Their isPaused variable was private, so we could not access that. We started it off as false, and changed it whenever spacebar was pressed. In the song converter method, we had to first convert our notes to theirs, and then at the same time add them to an Array List, because the fixed grid required one to work with. This was the hardest and most time consuming part.


	Their keyboard listeners made it easy for us to use our key events with their view, except for scrolling up and down, as they did not incorporate that into their views or controller. This is not a huge thing, but we believe it would be useful to scroll up and down with arrow keys as well, as songs can get to large ranges of frequencies. Their code was very cleanly written, and had java docs for pretty much everything. That was very useful to figure out functionality of certain methods or variables. Our biggest issue with the adapting to their code was mostly an issue on our end - we could not get the mouse click events that we had on our view working with their view because our controller used hardcoded numbers for the size of the frame to figure out what note the user clicked on. Changing this functionality required extensive changes and we could not get this to work.


	We did not have to ask them for much additional code, other than the Fixed Grid class and Fixed Grid Maker Enumeration, and the Note package (containing 3 classes) to convert.
